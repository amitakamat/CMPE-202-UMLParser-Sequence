
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.InputStreamReader;
import java.lang.ProcessBuilder.Redirect;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

//import com.amitakamat.umlparser.ClassInterfaceInfo;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.TypeDeclaration;
import net.sourceforge.plantuml.SourceStringReader;

/**
 * @author Amita Vasudev Kamat
 * 
 * CMPE - 202 - Personal Project Spring 2017
 */

/**
 * 
 * Class for generating UML sequence diagram from java code
 */

public class UmlParserSequence {
	private static File ClassDir;
	private static String grammar = "@startuml\n";

	public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, MalformedURLException {
		// TODO Auto-generated method stub

		//Check for input arguments
				//if(args.length == 0)
					//System.out.println("Input Invalid. Please provide source code folder path.");

				//else if(args.length > 2)
					//System.out.println("Input Invalid. Too many input arguments.");
				
				//else
				//{
					try{
						//String sourceFolder = args[0];
						String sourceFolder = "/home/amita/workspace/uml-sequence-test/";
						ClassDir = new File(sourceFolder);
						ArrayList<String> sourceCodeFiles = getJavaSourceFiles(sourceFolder);
						if(sourceCodeFiles.size() == 0)
						{
							System.out.println("No java files found in the source folder.");
						}
						else
						{
							//readSourceCode(sourceCodeFiles, sourceFolder);
							injectAspect(sourceFolder);
							runProgram(sourceFolder);
							grammar += "@enduml";
							System.out.println("Grammar: " + grammar);
							String outputFile = "/home/amita/GitHub 202/CMPE-202-UMLParser-Sequence/Output-Diagrams/OutputSequenceDiagram2.png";
							//String grammar = GrammarEngine.generateGrammar(ClassInterfaceDetails, classNames, interfaceNames);
							//String grammar = "@startuml\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\nAlice -> Bob: Another authentication Request\nAlice <-- Bob: another authentication Response\n@enduml";
							try{
								SourceStringReader grammarReader = new SourceStringReader(grammar);
								//FileOutputStream outputStream = new FileOutputStream(outputFile);
								//grammarReader.generateImage(outputStream);
							}
							catch(Exception e){
								System.out.println(e.getMessage());
							}
						}
					}
					catch(Exception e)
					{
						System.out.println(e.getMessage());
					}
				//}
	}
	
	/**
	 * Method to retrieve all the java files from the source folder
	 * @param sourceFolder
	 * @return List of the names of java files in the source folder
	 */
	private static ArrayList<String> getJavaSourceFiles(String sourceFolder){
		ArrayList<String> javaFiles = new ArrayList<String>();
		
		try
		{
			//Create a log file to record all the operations carried out.
			BufferedWriter writer = new BufferedWriter(new FileWriter(new File("../LogFile.txt")));
			
			writer.write("Logs\n\n");
			writer.write("--------Extracting java files from source Folder-----------------\n");
			
		
			File sourceDirectory = new File(sourceFolder);
			
			//Check if source folder provided in input exists t the given path
			if(sourceDirectory.isDirectory())
			{
		
			  for (File file : sourceDirectory.listFiles()) 
			  {
				  if (file.getName().endsWith((".java"))) 
				  {
			    	writer.write(file.getName() + " extracted \n");
			    	javaFiles.add(file.getName());
				  }
			  }
			}
			else
			{
				writer.write("Error : Source Directory not found.\n\n");
				System.out.println("Source Directory not found. Please ensure the path is correct and try again.");
			}
			
			writer.close();
		}
		catch(Exception e)
		{
		  System.out.println(e.getMessage());
		}
		return javaFiles;

	}

	/**
	 * Method to read the source files 
	 * @param javaSourceFiles list of java source files
	 * @param sourceFolderPath path of directory which contains the source files
	 */
	private static void readSourceCode(ArrayList<String> javaSourceFiles, String sourceFolderPath){
		StringBuilder fileContents = new StringBuilder();
		for(int i=0; i<javaSourceFiles.size(); i++){
			try
			{
				InputStream inputStream = new FileInputStream(sourceFolderPath + "/" + javaSourceFiles.get(i));
				BufferedReader bufferReader = new BufferedReader(new InputStreamReader(inputStream));
				String eachLineContent = bufferReader.readLine();
				
				while(eachLineContent!=null)
				{
					fileContents.append(eachLineContent + "\n");
					eachLineContent = bufferReader.readLine();
				}
				
				bufferReader.close();

			}
			catch(Exception e)
			{
				System.out.println("\n" + e.getMessage());
			}
		}
		String parseContent = fileContents.toString().replace("import", "//import");
		parseCode(parseContent);
	}
	
	private static void parseCode(String fileContent){
		CompilationUnit compileUnit = JavaParser.parse(fileContent);
		NodeList<TypeDeclaration<?>> types = compileUnit.getTypes();
		
		ArrayList<String> classNames = getClassNames(types);
	}
	
	private static ArrayList<String> getClassNames(NodeList<TypeDeclaration<?>> types){
		ArrayList<String> classNames = new ArrayList<String>();
		for(int i=0; i< types.size(); i++){
			TypeDeclaration<?> node = types.get(i);
			if(node instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration) node).isInterface()){
				classNames.add(node.getNameAsString());
			}
		}
		
		return classNames;
	}
	
	private static void runProgram(String path){
		Runtime rt = Runtime.getRuntime();
		String compileCommand = "ajc -1.5 -classpath .:../../Dependency/javaparser-core-3.1.0.jar:../../Dependency/aspectjrt.jar *.java *.aj";
		String runCommand = "java -classpath .:../../Dependency/aspectjrt.jar Main";
	    String line;
		//System.out.println(System.getProperty("user.dir"));
		try{
			Process p = rt.exec(compileCommand, null, new File(path));
			p.waitFor();
			BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
			while ((line = input.readLine()) != null) {
			   System.out.println(line);
			}
			System.out.println("ERROR");
			BufferedReader error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			while ((line = error.readLine()) != null) {
				System.out.println(line);
			}
			System.out.println("Program compiled properly");

			p = rt.exec(runCommand, null, new File(path));
			p.waitFor();
			System.out.println("Program execution attempted");
			System.out.println("Program execution stdout: ");

			input = new BufferedReader(new InputStreamReader(p.getInputStream()));
			while ((line = input.readLine()) != null) {
			    System.out.println(line);
			    generateGrammar(line);
			}
			System.out.println("Program execution stderr:");

			error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			while ((line = error.readLine()) != null) {
				System.out.println(line);
			}
			//grammar = parseTraceAndGenerateGrammar(input);
		  input.close();
		  error.close();
		}
		catch(Exception ex){
			System.out.println(ex.getMessage());
		}
	}
	
	 public static void InvokeOtherMain() throws NoSuchMethodException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, MalformedURLException, ClassNotFoundException {
	        URL url = ClassDir.toURI().toURL();
	        URL[] ClassURLs = new URL[] {url};
	        
	        ArrayList<String> classes = new ArrayList<String>();
			
			//Check if source folder provided in input exists t the given path
			if(ClassDir.isDirectory())
			{
		
			  for (File file : ClassDir.listFiles()) 
			  {
				  if (file.getName().endsWith((".class"))) 
				  {
			    	//writer.write(file.getName() + " extracted \n");
			    	classes.add(file.getName().replace(".class", ""));
				  }
			  }
			}
			else
			{
				//writer.write("Error : Source Directory not found.\n\n");
				System.out.println("Source Directory not found. Please ensure the path is correct and try again.");
			}
	        
	        
	        ClassLoader cl = new URLClassLoader(ClassURLs);
	        
	        for(String eachClass: classes){
				Class newClass = cl.loadClass(eachClass);
			}
	        
	        Class cls = cl.loadClass("Main");
	        Method method = cls.getMethod("main", String[].class);
	        String[] params = null;
	        method.invoke(null, (Object) params);
	    }
	 
	 private static void injectAspect(String path){
		 //String source = "../resources/";
		 File source = new File("../resources/TraceAspectSource.aj");
         File dest = new File(path + "/TraceAspectSource.aj");
		 try{
			 InputStream is = null;
			 OutputStream os = null;
			 try {
		        is = new FileInputStream(source);
		        os = new FileOutputStream(dest);
		        byte[] buffer = new byte[1024];
		        int length;
		        while ((length = is.read(buffer)) > 0) {
		            os.write(buffer, 0, length);
		        }
			 } 
			 finally {
		        is.close();
		        os.close();
		     }
		 }
		 catch(Exception ex){
				System.out.println(ex.getMessage());
		}
	 }
	 
	 private static void generateGrammar(String trace){
		// grammar += "@startuml\n";
		 try{
		 	if(trace.contains("->") || trace.contains("-->") || trace.contains("activate") || trace.contains("deactivate"))
			 {
				 grammar += trace + "\n";
			 }
			 // System.out.println(line);
		 }
		 catch(Exception ex){
				System.out.println(ex.getMessage());
			}
		 //grammar += "@enduml";
		 //System.out.println("Grammar: " + grammar);
	 }
}
